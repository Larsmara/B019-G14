{"remainingRequest":"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.2/node_modules/thread-loader/dist/cjs.js!/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.2/node_modules/babel-loader/lib/index.js!/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.2/src/store/index.js","dependencies":[{"path":"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.2/src/store/index.js","mtime":1553720708471},{"path":"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.2/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.2/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.filter\";\nimport _objectSpread from \"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.2/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.array.last-index-of\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.for-each\";\nimport \"core-js/modules/es6.array.find\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport * as firebase from 'firebase';\nimport moment from 'moment';\nimport { stat } from 'fs';\nVue.use(Vuex);\nmoment.locale('nb');\nexport var store = new Vuex.Store({\n  state: {\n    loadedProjects: [],\n    interneProsjekter: [],\n    loadedUser: [],\n    user: null,\n    loading: false,\n    error: null,\n    success: null\n  },\n  mutations: {\n    setLoadedProjects: function setLoadedProjects(state, payload) {\n      state.loadedProjects = payload;\n    },\n    setInterneProsjekter: function setInterneProsjekter(state, payload) {\n      state.interneProsjekter = payload;\n    },\n    setUser: function setUser(state, payload) {\n      state.user = payload;\n    },\n    updateUser: function updateUser(state, payload) {\n      var user = state.user.find(function (user) {\n        return user.userId === payload.userId;\n      });\n\n      if (payload.email) {\n        user.email = payload.email;\n      }\n\n      if (payload.phone) {\n        user.phone = payload.phone;\n      }\n    },\n    setLoadedUser: function setLoadedUser(state, payload) {\n      state.loadedUser = payload;\n    },\n    setLoading: function setLoading(state, payload) {\n      state.loading = payload;\n    },\n    setError: function setError(state, payload) {\n      state.error = payload;\n    },\n    setSuccess: function setSuccess(state, payload) {\n      state.success = payload;\n    },\n    clearError: function clearError(state) {\n      state.error = null;\n    },\n    clearSuccess: function clearSuccess(state, payload) {\n      state.success = null;\n    }\n  },\n  actions: {\n    // HENTER PROSJEKTER FRA DATABASEN\n    loadProjects: function loadProjects(_ref) {\n      var commit = _ref.commit;\n      var projects = [];\n      firebase.firestore().collection('projects').onSnapshot(function (snapshot) {\n        snapshot.docChanges().forEach(function (change) {\n          if (change.type == 'added' || change.type == 'modified') {\n            var doc = change.doc;\n            projects.push({\n              id: doc.id,\n              title: doc.data().title,\n              content: doc.data().content,\n              imageUrl: doc.data().imageUrl,\n              date: moment(doc.data().date).format('LL'),\n              slug: doc.data().slug,\n              internt: doc.data().internt,\n              eksternt: doc.data().eksternt,\n              produksjon: doc.data().produksjon,\n              utvalgt: doc.data().utvalgt,\n              creatorId: doc.data().creatorId\n            });\n            console.log('Pushet prosjekter til array');\n          }\n        });\n        commit('setLoadedProjects', projects);\n        commit('setLoading', false);\n      });\n    },\n    // LAGER ET NYTT PROSJEKT\n    createProject: function createProject(_ref2, payload) {\n      var commit = _ref2.commit,\n          getters = _ref2.getters;\n      commit('clearError');\n      commit('clearSuccess');\n      var project = {\n        title: payload.title,\n        content: payload.content,\n        date: payload.date,\n        slug: payload.slug,\n        internt: false,\n        eksternt: false,\n        utvalgt: false,\n        produksjon: false,\n        creatorId: firebase.auth().currentUser.uid // LAGRER I DATABASEN\n\n      };\n      var imageUrl;\n      var key;\n      firebase.firestore().collection('projects').add(project).then(function (data) {\n        key = data.id;\n        return key;\n      }).then(function (key) {\n        var filename = payload.image.name;\n        var ext = filename.slice(filename.lastIndexOf('.'));\n        return firebase.storage().ref('projects/' + key + '.' + ext).put(payload.image);\n      }).then(function (fileData) {\n        return fileData.ref.getDownloadURL().then(function (downloadUrl) {\n          imageUrl = downloadUrl;\n          return firebase.firestore().collection('projects').doc(key).update({\n            imageUrl: downloadUrl\n          });\n        });\n        /* imageUrl = fileData.metadata.downloadURLs[0]\n        return firebase.firestore().collection('projects').child(key).update({imageUrl: imageUrl}) */\n      }).then(function () {\n        var success = {\n          message: 'Takk for ditt bidrag!'\n        };\n        commit('setSuccess', success);\n        commit('createProject', _objectSpread({}, project, {\n          imageUrl: imageUrl,\n          id: key\n        }));\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    // OPPDTATERER PROSJEKTET TIL INTERNT\n    updateToInternt: function updateToInternt(_ref3, payload) {\n      var commit = _ref3.commit;\n      commit('clearSuccess');\n      commit('clearError');\n      console.log(payload.id);\n      firebase.firestore().collection('projects').doc(payload.id).update({\n        internt: true,\n        eksternt: false,\n        produksjon: false\n      }).then(function () {\n        console.log('oppdatert til internt - ' + payload.title);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    // OPPDATER PROSJEKTET TIL EKSTERNT\n    updateToEksternt: function updateToEksternt(_ref4, payload) {\n      var commit = _ref4.commit;\n      commit('clearSuccess');\n      commit('clearError');\n      console.log(payload.id);\n      firebase.firestore().collection('projects').doc(payload.id).update({\n        eksternt: true,\n        internt: false,\n        produksjon: false\n      }).then(function () {\n        console.log('oppdatert til eksternt - ' + payload.title);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    // OPPDATER PROSJEKTET TIL INTERNT\n    updateToUtvalgt: function updateToUtvalgt(_ref5, payload) {\n      var commit = _ref5.commit;\n      commit('clearSuccess');\n      commit('clearError');\n      console.log(payload.id);\n      firebase.firestore().collection('projects').doc(payload.id).update({\n        eksternt: payload.eksternt,\n        internt: payload.internt,\n        produksjon: payload.produksjon,\n        utvalgt: true\n      }).then(function () {\n        console.log('oppdatert til utvalgt - ' + payload.title);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    // OPPDATER PROSJEKTET TIL PRODUKSJON\n    updateToProduksjon: function updateToProduksjon(_ref6, payload) {\n      var commit = _ref6.commit;\n      commit('clearSuccess');\n      commit('clearError');\n      console.log(payload.id);\n      firebase.firestore().collection('projects').doc(payload.id).update({\n        eksternt: payload.eksternt,\n        internt: payload.internt,\n        produksjon: true,\n        utvalgt: payload.utvalgt\n      }).then(function () {\n        console.log('oppdatert til produksjon - ' + payload.title);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    deleteProject: function deleteProject(_ref7, payload) {\n      var commit = _ref7.commit;\n      firebase.firestore().collection('projects').doc(payload.id).delete();\n      console.log('Slettet prosjekt ' + payload.title);\n    },\n    // REGISTRERER EN NY BRUKER\n    signUserUp: function signUserUp(_ref8, payload) {\n      var commit = _ref8.commit,\n          getters = _ref8.getters;\n      commit('setLoading', true);\n      commit('clearSuccess');\n      commit('clearError');\n      firebase.firestore().collection('users').doc(payload.user.phone).get().then(function (doc) {\n        console.log(doc);\n\n        if (doc.exists) {\n          var error = {\n            message: 'Mobilnummber finnes'\n          };\n          commit('setError', error);\n        } else {\n          firebase.auth().createUserWithEmailAndPassword(payload.email, payload.passord).then(function (user) {\n            firebase.firestore().collection('users').doc(payload.user.phone).set({\n              email: payload.user.email,\n              name: payload.user.name,\n              slug: payload.user.slug,\n              phone: payload.user.phone,\n              gdpr: payload.user.gdpr,\n              isAdmin: false,\n              joined: payload.user.joined,\n              userId: user.user.uid\n            });\n            firebase.auth().currentUser.updateProfile({\n              displayName: payload.user.phone\n            }).then(function () {\n              console.log('oppdatert bruker');\n            }).catch(function (error) {\n              console.log(error);\n            });\n            commit('setLoading', false);\n            var newUser = [id = user.uid];\n            commit('setUser', newUser);\n          }).catch(function (error) {\n            commit('setLoading', false);\n            commit('setError', error);\n            console.log(error);\n          });\n        }\n      });\n    },\n    // OPPDATERER BRUKER EPOST OG TELEFONNUMMER\n    updateUser: function updateUser(_ref9, payload) {\n      var commit = _ref9.commit,\n          getters = _ref9.getters;\n      commit('setLoading', true);\n      commit('clearSuccess');\n      commit('clearError');\n      var updateObj = {};\n\n      if (payload.email) {\n        updateObj.email = payload.email;\n      }\n\n      if (payload.phone) {\n        updateObj.phone = payload.phone;\n      }\n\n      var userDoc = getters.user[0].phone;\n      firebase.auth().currentUser.updateEmail(payload.email).then(function () {\n        commit('setLoading', false);\n        commit('updateUser', payload);\n        var success = {\n          message: 'Epost adresse er endret'\n        };\n        commit('setSuccess', success);\n      }).then(function () {}).catch(function (error) {\n        console.log(error);\n        commit('setError', error);\n        commit('setLoading', false);\n      });\n    },\n    // LOGGER BRUKER INN\n    signUserIn: function signUserIn(_ref10, payload) {\n      var commit = _ref10.commit;\n      commit('setLoading', true);\n      commit('clearSuccess');\n      commit('clearError');\n      firebase.auth().signInWithEmailAndPassword(payload.email, payload.password).then(function (user) {\n        commit('setLoading', false);\n        var newUser = {\n          id: user.uid\n        };\n        commit('setUser', newUser);\n      }).catch(function (error) {\n        commit('setLoading', false);\n        commit('setError', error);\n        console.log(error);\n      });\n    },\n    loadUser: function loadUser(_ref11, payload) {\n      var commit = _ref11.commit;\n    },\n    // Henter bruker fra DB\n    fetchUserData: function fetchUserData(_ref12) {\n      var commit = _ref12.commit;\n      commit('setLoading', true);\n      commit('clearSuccess');\n      commit('clearError');\n      var userData = [];\n      firebase.firestore().collection('users').where('userId', '==', firebase.auth().currentUser.uid).get().then(function (snapshot) {\n        snapshot.forEach(function (doc) {\n          var docs = doc.data();\n          console.log(moment(docs.joined));\n          userData.push({\n            email: doc.data().email,\n            name: docs.name,\n            phone: docs.phone,\n            admin: docs.isAdmin,\n            joined: moment(doc.data().joined).format('LLL'),\n            slug: docs.slug,\n            userId: docs.userId\n          });\n          console.log('Bruker epost ' + doc.data().email);\n        });\n      });\n      commit('setLoading', false);\n      commit('setUser', userData);\n    },\n    // METODE FOR Å AUTOMATISK LOGGE EN BRUKER INN\n    autoSignIn: function autoSignIn(_ref13, payload) {\n      var commit = _ref13.commit;\n      commit('setUser', {\n        id: payload.uid\n      });\n    },\n    // Logger ut bruker\n    logout: function logout(_ref14) {\n      var commit = _ref14.commit;\n      firebase.auth().signOut();\n      commit('setUser', null);\n    },\n    // FJERNER FEILMELDINGER HOS BRUKER\n    clearError: function clearError(_ref15) {\n      var commit = _ref15.commit;\n      commit('clearError');\n    },\n    // FJERNER SUCCESS MELDINGEN\n    clearSuccess: function clearSuccess(_ref16) {\n      var commit = _ref16.commit;\n      commit('clearSuccess');\n    }\n  },\n  getters: {\n    loadedProjects: function loadedProjects(state) {\n      return state.loadedProjects;\n    },\n    loadedProject: function loadedProject(state) {\n      return function (projectId) {\n        return state.loadedProjects.find(function (project) {\n          return project.id === projectId;\n        });\n      };\n    },\n    adminProject: function adminProject(state) {\n      return state.loadedProjects.filter(function (project) {\n        return project.internt === false && project.eksternt === false && project.utvalgt === false;\n      });\n    },\n    interneProsjekter: function interneProsjekter(state) {\n      return state.loadedProjects.filter(function (project) {\n        return project.internt;\n      });\n    },\n    eksterneProsjekter: function eksterneProsjekter(state) {\n      return state.loadedProjects.filter(function (project) {\n        return project.eksternt;\n      });\n    },\n    utvalgteProsjekter: function utvalgteProsjekter(state) {\n      return state.loadedProjects.filter(function (project) {\n        return project.utvalgt;\n      });\n    },\n    produksjonProsjekter: function produksjonProsjekter(state) {\n      return state.loadedProjects.filter(function (project) {\n        return project.produksjon;\n      });\n    },\n    brukerProsjekter: function brukerProsjekter(state) {\n      return state.loadedProjects.filter(function (project) {\n        return project.creatorId === state.user[0].userId;\n      });\n    },\n    loadedUser: function loadedUser(state) {\n      return state.loadedUser;\n    },\n    user: function user(state) {\n      return state.user;\n    },\n    loading: function loading(state) {\n      return state.loading;\n    },\n    error: function error(state) {\n      return state.error;\n    },\n    success: function success(state) {\n      return state.success;\n    }\n  }\n});",{"version":3,"sources":["/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.2/src/store/index.js"],"names":["Vue","Vuex","firebase","moment","stat","use","locale","store","Store","state","loadedProjects","interneProsjekter","loadedUser","user","loading","error","success","mutations","setLoadedProjects","payload","setInterneProsjekter","setUser","updateUser","find","userId","email","phone","setLoadedUser","setLoading","setError","setSuccess","clearError","clearSuccess","actions","loadProjects","commit","projects","firestore","collection","onSnapshot","snapshot","docChanges","forEach","change","type","doc","push","id","title","data","content","imageUrl","date","format","slug","internt","eksternt","produksjon","utvalgt","creatorId","console","log","createProject","getters","project","auth","currentUser","uid","key","add","then","filename","image","name","ext","slice","lastIndexOf","storage","ref","put","fileData","getDownloadURL","downloadUrl","update","message","catch","updateToInternt","updateToEksternt","updateToUtvalgt","updateToProduksjon","deleteProject","delete","signUserUp","get","exists","createUserWithEmailAndPassword","passord","set","gdpr","isAdmin","joined","updateProfile","displayName","newUser","updateObj","userDoc","updateEmail","signUserIn","signInWithEmailAndPassword","password","loadUser","fetchUserData","userData","where","docs","admin","autoSignIn","logout","signOut","loadedProject","projectId","adminProject","filter","eksterneProsjekter","utvalgteProsjekter","produksjonProsjekter","brukerProsjekter"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport * as firebase from 'firebase'\nimport moment from 'moment'\nimport { stat } from 'fs';\n\nVue.use(Vuex)\nmoment.locale('nb')\n\nexport const store = new Vuex.Store({\n  state: {\n    loadedProjects: [],\n    interneProsjekter: [],\n    loadedUser: [],\n    user: null,\n    loading: false,\n    error: null,\n    success: null\n  },\n  mutations: {\n    setLoadedProjects(state, payload){\n      state.loadedProjects = payload\n    },\n    setInterneProsjekter(state, payload){\n      state.interneProsjekter = payload\n    },\n    setUser(state, payload){\n      state.user = payload\n    },\n    updateUser(state, payload){\n      const user = state.user.find(user => {\n        return user.userId === payload.userId\n      })\n      if(payload.email){\n        user.email = payload.email\n      }\n      if(payload.phone){\n        user.phone = payload.phone\n      }\n    },\n    setLoadedUser(state, payload){\n      state.loadedUser = payload\n    },\n    setLoading(state, payload){\n      state.loading = payload\n    },\n    setError(state, payload){\n      state.error = payload\n    },\n    setSuccess(state, payload){\n      state.success = payload\n    },\n    clearError(state){\n      state.error = null\n    },\n    clearSuccess(state, payload){\n      state.success = null\n    }\n  },\n  actions: {\n    // HENTER PROSJEKTER FRA DATABASEN\n    loadProjects({commit}){\n      const projects = []\n\n      firebase.firestore().collection('projects').onSnapshot((snapshot) => {\n          snapshot.docChanges().forEach((change) => {\n              if(change.type == 'added' || change.type == 'modified'){\n                  let doc = change.doc\n                  projects.push({\n                      id: doc.id,\n                      title: doc.data().title,\n                      content: doc.data().content,\n                      imageUrl: doc.data().imageUrl,\n                      date: moment(doc.data().date).format('LL'),\n                      slug: doc.data().slug,\n                      internt: doc.data().internt,\n                      eksternt: doc.data().eksternt,\n                      produksjon: doc.data().produksjon,\n                      utvalgt: doc.data().utvalgt,\n                      creatorId: doc.data().creatorId\n                  })\n                  console.log('Pushet prosjekter til array')\n              }\n          })\n          commit('setLoadedProjects', projects)\n          commit('setLoading', false)\n      })\n    },\n    // LAGER ET NYTT PROSJEKT\n    createProject({commit, getters}, payload){\n      commit('clearError')\n      commit('clearSuccess')\n      const project = {\n        title: payload.title,\n        content: payload.content,\n        date: payload.date,\n        slug: payload.slug,\n        internt: false,\n        eksternt: false,\n        utvalgt: false,\n        produksjon: false,\n        creatorId: firebase.auth().currentUser.uid\n      }\n      // LAGRER I DATABASEN\n      let imageUrl\n      let key\n\n      firebase.firestore().collection('projects').add(project)\n      .then((data) => {\n        key = data.id\n        return key\n      }).then(key => {\n        const filename = payload.image.name\n        const ext = filename.slice(filename.lastIndexOf('.'))\n        return firebase.storage().ref('projects/' + key + '.' + ext).put(payload.image)\n      }).then(fileData => {\n        return fileData.ref.getDownloadURL()\n        .then(downloadUrl => {\n          imageUrl = downloadUrl\n          return firebase.firestore().collection('projects').doc(key).update({imageUrl: downloadUrl})\n        })\n        /* imageUrl = fileData.metadata.downloadURLs[0]\n        return firebase.firestore().collection('projects').child(key).update({imageUrl: imageUrl}) */\n      }).then(() => {\n        let success = {message: 'Takk for ditt bidrag!'}\n        commit('setSuccess', success)\n        commit('createProject', {\n          ...project,\n          imageUrl: imageUrl,\n          id: key\n        })\n      }).catch((error) => {\n        console.log(error)\n      })\n    },\n    // OPPDTATERER PROSJEKTET TIL INTERNT\n    updateToInternt({commit}, payload){\n      commit('clearSuccess')\n      commit('clearError')\n      console.log(payload.id)\n      firebase.firestore().collection('projects').doc(payload.id).update({\n          internt: true,\n          eksternt: false,\n          produksjon: false\n      }).then(() => {\n          console.log('oppdatert til internt - ' + payload.title) \n      }).catch(error => {\n          console.log(error)\n      })\n    },\n    // OPPDATER PROSJEKTET TIL EKSTERNT\n    updateToEksternt({commit}, payload){\n      commit('clearSuccess')\n      commit('clearError')\n      console.log(payload.id)\n      firebase.firestore().collection('projects').doc(payload.id).update({\n          eksternt: true,\n          internt: false,\n          produksjon: false\n      }).then(() => {\n          console.log('oppdatert til eksternt - ' + payload.title) \n      }).catch(error => {\n          console.log(error)\n      })\n    },\n    // OPPDATER PROSJEKTET TIL INTERNT\n    updateToUtvalgt({commit}, payload){\n      commit('clearSuccess')\n      commit('clearError')\n      console.log(payload.id)\n      firebase.firestore().collection('projects').doc(payload.id).update({\n          eksternt: payload.eksternt,\n          internt: payload.internt,\n          produksjon: payload.produksjon,\n          utvalgt: true\n      }).then(() => {\n          console.log('oppdatert til utvalgt - ' + payload.title) \n      }).catch(error => {\n          console.log(error)\n      })\n    },\n    // OPPDATER PROSJEKTET TIL PRODUKSJON\n    updateToProduksjon({commit}, payload){\n      commit('clearSuccess')\n      commit('clearError')\n      console.log(payload.id)\n      firebase.firestore().collection('projects').doc(payload.id).update({\n          eksternt: payload.eksternt,\n          internt: payload.internt,\n          produksjon: true,\n          utvalgt: payload.utvalgt\n      }).then(() => {\n          console.log('oppdatert til produksjon - ' + payload.title) \n      }).catch(error => {\n          console.log(error)\n      })\n    },\n    deleteProject({commit}, payload){\n      firebase.firestore().collection('projects').doc(payload.id).delete()\n      console.log('Slettet prosjekt ' + payload.title)\n    },\n    // REGISTRERER EN NY BRUKER\n    signUserUp({commit, getters}, payload){\n      commit('setLoading', true)\n      commit('clearSuccess')\n      commit('clearError')\n      \n      firebase.firestore().collection('users').doc(payload.user.phone).get()\n      .then(doc => {\n        console.log(doc)\n        if(doc.exists){\n          let error = {message: 'Mobilnummber finnes'}\n          commit('setError', error)\n        } else {\n          firebase.auth().createUserWithEmailAndPassword(payload.email, payload.passord)\n          .then((user) => {\n            firebase.firestore().collection('users').doc(payload.user.phone).set({\n              email: payload.user.email,\n              name: payload.user.name,\n              slug: payload.user.slug,\n              phone: payload.user.phone,\n              gdpr: payload.user.gdpr,\n              isAdmin: false,\n              joined: payload.user.joined,\n              userId: user.user.uid\n            })\n            firebase.auth().currentUser.updateProfile({\n              displayName: payload.user.phone\n            }).then(() => {\n              console.log('oppdatert bruker')\n            }).catch((error) => {\n              console.log(error)\n            })\n            commit('setLoading', false)\n            const newUser = [\n              id = user.uid\n            ]\n            commit('setUser', newUser)\n          }).catch((error) => {\n            commit('setLoading', false)\n            commit('setError', error)\n            console.log(error)\n          })\n        }\n      })\n    },\n    // OPPDATERER BRUKER EPOST OG TELEFONNUMMER\n    updateUser({commit,getters}, payload){\n      commit('setLoading', true)\n      commit('clearSuccess')\n      commit('clearError')\n      const updateObj = {}\n\n      if(payload.email){\n        updateObj.email = payload.email\n      }\n      if(payload.phone){\n        updateObj.phone = payload.phone\n      }\n\n      const userDoc = getters.user[0].phone\n      firebase.auth().currentUser.updateEmail(payload.email).then(() => {\n        commit('setLoading', false)\n        commit('updateUser', payload)\n        let success = {message: 'Epost adresse er endret'}\n        commit('setSuccess', success)\n      }).then(() => {\n        \n      }).catch(error => {\n        console.log(error)\n        commit('setError', error)\n        commit('setLoading', false)\n      })\n\n    },\n    // LOGGER BRUKER INN\n    signUserIn({commit}, payload){\n      commit('setLoading', true)\n      commit('clearSuccess')\n      commit('clearError')\n      \n      firebase.auth().signInWithEmailAndPassword(payload.email, payload.password)\n      .then((user) => {\n        commit('setLoading', false)\n        const newUser = {\n          id: user.uid\n        }\n        commit('setUser', newUser)\n      }).catch((error) => {\n        commit('setLoading', false)\n        commit('setError', error)\n        console.log(error)\n      })\n    },\n    loadUser({commit}, payload){\n\n    },\n    // Henter bruker fra DB\n    fetchUserData({commit}){\n      commit('setLoading', true)\n      commit('clearSuccess')\n      commit('clearError')\n      let userData = []\n\n      firebase.firestore().collection('users')\n      .where('userId', '==', firebase.auth().currentUser.uid).get()\n        .then(snapshot => {\n            snapshot.forEach(doc => {\n              let docs = doc.data()\n              console.log(moment(docs.joined))\n              userData.push({\n                  email: doc.data().email,\n                  name: docs.name,\n                  phone: docs.phone,\n                  admin: docs.isAdmin,\n                  joined: moment(doc.data().joined).format('LLL'),\n                  slug: docs.slug,\n                  userId: docs.userId\n                })  \n                console.log('Bruker epost ' + doc.data().email)\n            })\n        })\n        commit('setLoading', false)\n        commit('setUser', userData)\n    },\n    // METODE FOR Å AUTOMATISK LOGGE EN BRUKER INN\n    autoSignIn({commit}, payload){\n      commit('setUser', {id: payload.uid})\n    },\n    // Logger ut bruker\n    logout({commit}){\n      firebase.auth().signOut()\n      commit('setUser', null)\n    },\n    // FJERNER FEILMELDINGER HOS BRUKER\n    clearError({commit}){\n      commit('clearError')\n    },\n    // FJERNER SUCCESS MELDINGEN\n    clearSuccess({commit}){\n      commit('clearSuccess')\n    }\n  },\n  getters: {\n    loadedProjects (state) {\n      return state.loadedProjects\n    },\n    loadedProject (state) {\n      return (projectId) => {\n        return state.loadedProjects.find((project) => {\n          return project.id === projectId\n        })\n      }\n    },\n    adminProject(state){\n      return state.loadedProjects.filter(project => project.internt === false && project.eksternt === false && project.utvalgt === false)\n    },\n    interneProsjekter(state){\n      return state.loadedProjects.filter(project => project.internt)\n    },\n    eksterneProsjekter(state){\n      return state.loadedProjects.filter(project => project.eksternt)\n    },\n    utvalgteProsjekter(state){\n      return state.loadedProjects.filter(project => project.utvalgt)\n    },\n    produksjonProsjekter(state){\n      return state.loadedProjects.filter(project => project.produksjon)\n    },\n    brukerProsjekter(state){\n      return state.loadedProjects.filter(project => project.creatorId === state.user[0].userId)\n    },\n    loadedUser(state){\n      return state.loadedUser   \n    },\n    user(state){\n      return state.user\n    },\n    loading(state){\n      return state.loading\n    },\n    error(state){\n      return state.error\n    },\n    success(state){\n      return state.success\n    }\n  }\n})\n"]}]}