{"remainingRequest":"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.1/node_modules/babel-loader/lib/index.js!/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.1/node_modules/eslint-loader/index.js??ref--13-0!/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.1/src/store/projects/index.js","dependencies":[{"path":"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.1/src/store/projects/index.js","mtime":1552247248648},{"path":"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.1/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.1/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.1/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find\";\nimport _objectSpread from \"/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.1/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport Vue from 'vue';\nimport Vuex from 'vuex';\nimport * as firebase from 'firebase';\nimport moment from 'moment';\nVue.use(Vuex);\nmoment.locale('nb');\nexport default {\n  state: {\n    loadedProjects: [],\n    loading: false,\n    error: null\n  },\n  mutations: {\n    setLoadedProjects: function setLoadedProjects(state, payload) {\n      state.loadedProjects = payload;\n    },\n\n    /*    updateToInternt(state, payload){\n         const project = state.loadedProjects.find(project => {\n           return project.id === payload.id\n         })\n         project.internt = true\n       }, */\n    setLoading: function setLoading(state, payload) {\n      state.loading = payload;\n    },\n    setError: function setError(state, payload) {\n      state.error = payload;\n    },\n    clearError: function clearError(state) {\n      state.error = null;\n    }\n  },\n  actions: {\n    // HENTER PROSJEKTER FRA DATABASEN\n    loadProjects: function loadProjects(_ref) {\n      var commit = _ref.commit;\n      commit('setLoading', true);\n      var projects = [];\n      /* firebase.firestore().collection('projects').get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          const data = {\n            id: doc.id,\n            title: doc.data().title,\n            content: doc.data().content,\n            imageUrl: doc.data().imageUrl,\n            date: moment(doc.data().date).format('lll'),\n            slug: doc.data().slug,\n            internt: doc.data().internt,\n            eksternt: doc.data().eksternt,\n            utvalgt: doc.data().utvalgt,\n            creatorId: doc.data().creatorId\n          }\n          projects.push(data)\n        })\n        commit('setLoadedProjects', projects)\n      }) */\n\n      firebase.firestore().collection('projects').onSnapshot(function (snapshot) {\n        snapshot.docChanges().forEach(function (change) {\n          if (change.type == 'added' || change.type == 'modified') {\n            var doc = change.doc;\n            projects.push({\n              id: doc.id,\n              title: doc.data().title,\n              content: doc.data().content,\n              imageUrl: doc.data().imageUrl,\n              date: moment(doc.data().date).format('lll'),\n              slug: doc.data().slug,\n              internt: doc.data().internt,\n              eksternt: doc.data().eksternt,\n              utvalgt: doc.data().utvalgt,\n              creatorId: doc.data().creatorId\n            });\n          }\n        });\n        commit('setLoadedProjects', projects);\n        commit('setLoading', false);\n      });\n    },\n    // LAGER ET NYTT PROSJEKT\n    createProject: function createProject(_ref2, payload) {\n      var commit = _ref2.commit,\n          getters = _ref2.getters;\n      var project = {\n        title: payload.title,\n        content: payload.content,\n        date: payload.date,\n        slug: payload.slug,\n        internt: false,\n        eksternt: false,\n        utvalgt: false,\n        produksjon: false,\n        creatorId: firebase.auth().currentUser.uid // LAGRER I DATABASEN\n\n      };\n      var imageUrl;\n      var key;\n      firebase.firestore().collection('projects').add(project).then(function (data) {\n        key = data.id;\n        return key;\n      }).then(function (key) {\n        var filename = payload.image.name;\n        var ext = filename.slice(filename.lastIndexOf('.'));\n        return firebase.storage().ref('projects/' + key + '.' + ext).put(payload.image);\n      }).then(function (fileData) {\n        return fileData.ref.getDownloadURL().then(function (downloadUrl) {\n          imageUrl = downloadUrl;\n          return firebase.firestore().collection('projects').doc(key).update({\n            imageUrl: downloadUrl\n          });\n        });\n        /* imageUrl = fileData.metadata.downloadURLs[0]\n        return firebase.firestore().collection('projects').child(key).update({imageUrl: imageUrl}) */\n      }).then(function () {\n        commit('createProject', _objectSpread({}, project, {\n          imageUrl: imageUrl,\n          id: key\n        }));\n      }).catch(function (error) {\n        console.log(error);\n      });\n    },\n    // FJERNER FEILMELDINGER HOS BRUKER\n    clearError: function clearError(_ref3) {\n      var commit = _ref3.commit;\n      commit('clearError');\n    }\n  },\n  getters: {\n    loadedProjects: function loadedProjects(state) {\n      return state.loadedProjects;\n    },\n    loadedProject: function loadedProject(state) {\n      return function (projectId) {\n        return state.loadedProjects.find(function (project) {\n          return project.id === projectId;\n        });\n      };\n    },\n    loading: function loading(state) {\n      return state.loading;\n    },\n    error: function error(state) {\n      return state.error;\n    }\n  }\n};",{"version":3,"sources":["/Users/lars-martin/dev/Bacheloroppgave/B019-G14/v2.1/src/store/projects/index.js"],"names":["Vue","Vuex","firebase","moment","use","locale","state","loadedProjects","loading","error","mutations","setLoadedProjects","payload","setLoading","setError","clearError","actions","loadProjects","commit","projects","firestore","collection","onSnapshot","snapshot","docChanges","forEach","change","type","doc","push","id","title","data","content","imageUrl","date","format","slug","internt","eksternt","utvalgt","creatorId","createProject","getters","project","produksjon","auth","currentUser","uid","key","add","then","filename","image","name","ext","slice","lastIndexOf","storage","ref","put","fileData","getDownloadURL","downloadUrl","update","catch","console","log","loadedProject","projectId","find"],"mappings":"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","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\nimport * as firebase from 'firebase'\nimport moment from 'moment'\n\nVue.use(Vuex)\nmoment.locale('nb')\n\nexport default{\n  state: {\n    loadedProjects: [],\n    loading: false,\n    error: null\n  },\n  mutations: {\n    setLoadedProjects(state, payload){\n      state.loadedProjects = payload\n    },\n /*    updateToInternt(state, payload){\n      const project = state.loadedProjects.find(project => {\n        return project.id === payload.id\n      })\n      project.internt = true\n    }, */\n    setLoading(state, payload){\n      state.loading = payload\n    },\n    setError(state, payload){\n      state.error = payload\n    },\n    clearError(state){\n      state.error = null\n    }\n  },\n  actions: {\n    // HENTER PROSJEKTER FRA DATABASEN\n    loadProjects({commit}){\n      commit('setLoading', true)\n      const projects = []\n      /* firebase.firestore().collection('projects').get()\n      .then((querySnapshot) => {\n        querySnapshot.forEach((doc) => {\n          const data = {\n            id: doc.id,\n            title: doc.data().title,\n            content: doc.data().content,\n            imageUrl: doc.data().imageUrl,\n            date: moment(doc.data().date).format('lll'),\n            slug: doc.data().slug,\n            internt: doc.data().internt,\n            eksternt: doc.data().eksternt,\n            utvalgt: doc.data().utvalgt,\n            creatorId: doc.data().creatorId\n          }\n          projects.push(data)\n        })\n        commit('setLoadedProjects', projects)\n      }) */\n      firebase.firestore().collection('projects').onSnapshot((snapshot) => {\n          snapshot.docChanges().forEach((change) => {\n              if(change.type == 'added' || change.type == 'modified'){\n                  let doc = change.doc\n                  projects.push({\n                      id: doc.id,\n                      title: doc.data().title,\n                      content: doc.data().content,\n                      imageUrl: doc.data().imageUrl,\n                      date: moment(doc.data().date).format('lll'),\n                      slug: doc.data().slug,\n                      internt: doc.data().internt,\n                      eksternt: doc.data().eksternt,\n                      utvalgt: doc.data().utvalgt,\n                      creatorId: doc.data().creatorId\n                  })\n              }\n          })\n          commit('setLoadedProjects', projects)\n          commit('setLoading', false)\n      })\n    },\n    // LAGER ET NYTT PROSJEKT\n    createProject({commit, getters}, payload){\n      const project = {\n        title: payload.title,\n        content: payload.content,\n        date: payload.date,\n        slug: payload.slug,\n        internt: false,\n        eksternt: false,\n        utvalgt: false,\n        produksjon: false,\n        creatorId: firebase.auth().currentUser.uid\n      }\n      // LAGRER I DATABASEN\n      let imageUrl\n      let key\n\n      firebase.firestore().collection('projects').add(project)\n      .then((data) => {\n        key = data.id\n        return key\n      }).then(key => {\n        const filename = payload.image.name\n        const ext = filename.slice(filename.lastIndexOf('.'))\n        return firebase.storage().ref('projects/' + key + '.' + ext).put(payload.image)\n      }).then(fileData => {\n        return fileData.ref.getDownloadURL()\n        .then(downloadUrl => {\n          imageUrl = downloadUrl\n          return firebase.firestore().collection('projects').doc(key).update({imageUrl: downloadUrl})\n        })\n        /* imageUrl = fileData.metadata.downloadURLs[0]\n        return firebase.firestore().collection('projects').child(key).update({imageUrl: imageUrl}) */\n      }).then(() => {\n        commit('createProject', {\n          ...project,\n          imageUrl: imageUrl,\n          id: key\n        })\n      }).catch((error) => {\n        console.log(error)\n      })\n    },\n    // FJERNER FEILMELDINGER HOS BRUKER\n    clearError({commit}){\n      commit('clearError')\n    }\n  },\n  getters: {\n    loadedProjects (state) {\n      return state.loadedProjects\n    },\n    loadedProject (state) {\n      return (projectId) => {\n        return state.loadedProjects.find((project) => {\n          return project.id === projectId\n        })\n      }\n    },\n    loading(state){\n      return state.loading\n    },\n    error(state){\n      return state.error\n    }\n  }\n}\n"]}]}